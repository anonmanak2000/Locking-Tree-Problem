Tree Structure and Problem Context

Question: Locking the tree of space

You have a world map represented as an M-Ary tree (sample tree below)

Sample tree diagram:

        World
       /      \
    Asia     Africa
   /     \
India   China
/ |        / | ...
KA MP ...
/ |
BLR ...


You need to define three operations on it:

lock(X, uid)
unlock(X, uid)
upgradeLock(x, uid)
where X is the name of a node in the tree (that would be unique) and uid is the user who is performing the operation.


Here are the definitions for the Operations:

Lock(X, uid)

Lock takes exclusive access on the subtree rooted at X. It is formally defined like this: Once lock(X, uid) succeeds, then:

lock(A, anyUserId) should fail (returns false), where A is a descendant of X.
lock(B, anyUserId) should fail (returns false), where X is a descendant of B.
Lock operation cannot be performed on a node which is already locked i.e. lock(X, anyUserId) should fail (return false).

Unlock(X, uid)

Unlock reverts what was done by the Lock operation. It can only be called on same node on which user uid had called a Lock on before. Returns true if successful.

UpgradeLock(X, uid)

It helps the user uid to upgrade their lock to an ancestor node. It is only possible if the node X already has locked descendents and all of them are only locked by the same user uid. Upgrade should fail if there is any node which is descendent of X and that is locked by a different user. Successful upgrade will lock the node. UpgradeLock should not violate the consistency model that Lock/Unlock function requires.


Additional Notes

Here 1 China 3 indicates the following: OperationType NodeName UserId

The tree is always fully balanced

Constraints on the inputs are as follows:

css
Copy code
1 < N < 5 * 10^5
1 < m < 30
1 < Q < 5 * 10^5
1 < length of NodeName < 20
Optimize the time complexity

Lock - O(logₘN)
Unlock - O(logₘN)
UpgradeLock - O(numberOfLockedNodes * logₘN)
Lock operation on already locked node should fail.

Once UpgradeLock(X, uid) succeeds on X, it is equivalent to X being locked by uid. So, Lock(A/B, anyUser) should fail as per the definition of Lock and Unlock(X, uid) should also work.

Upgrade lock operation on a node having no locked descendants should fail and upgrade lock on already...